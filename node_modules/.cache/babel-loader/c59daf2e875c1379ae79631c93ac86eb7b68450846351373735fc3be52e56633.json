{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"f3a484cebcb66cddbc0df775cf6111f0\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.Slice(1, 6).map(d => {\n    return {\n      title: formaToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formaToLocalTime(d.dt, timezone, 'hh:mm a'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formatCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('onecall', {\n    lat,\n    lon,\n    exclude: 'current,minutely,alerts',\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return {\n    ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formaToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL YYYY' | Local time: 'hh: mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\nexport default getFormattedWeatherData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","Slice","map","d","title","formaToLocalTime","day","slice","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","arguments","length","undefined","fromSeconds","setZone","toFormat"],"sources":["/Users/chaithrabs/Desktop/REACT/weatherapp/src/Services/weatherServic.js"],"sourcesContent":["import {DateTime} from \"luxon\";\n\nconst API_KEY = \"f3a484cebcb66cddbc0df775cf6111f0\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n  };\n};\n\nconst formatForecastWeather = (data) => {\n    let { timezone, daily, hourly } = data;\n    daily = daily.Slice(1, 6).map(d => {\n        return {\n            title: formaToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon\n        }\n    });\n\n    hourly = hourly.slice(1,6).map(d => {\n        return {\n            title: formaToLocalTime(d.dt, timezone, 'hh:mm a'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon\n        }\n    });\n\n    return {timezone,daily,hourly};\n};\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\n    \"weather\",\n    searchParams\n  ).then(formatCurrentWeather);\n\n  const {lat, lon} = formatCurrentWeather;\nconst formattedForecastWeather = await getWeatherData('onecall',\n{lat,lon,exclude: 'current,minutely,alerts',units:searchParams.units\n}).then(formatForecastWeather);\n\n\n\n  return {...formattedCurrentWeather, ...formattedForecastWeather};\n};\n\nconst formaToLocalTime = (secs, zone, format=\"cccc, dd LLL YYYY' | Local time: 'hh: mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nexport default getFormattedWeatherData\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}